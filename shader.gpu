

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
uniform mat4 ModelViewProjectionMatrix, NormalM;


varying vec3 varCol;

uniform vec3 lightPos;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec4 norm = NormalM*vec4(normal,1.0);
    vec3 N = normalize(vec3(norm));
    vec3 L = normalize(lightPos - vertPos);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 80.0);
    }
    vec3 ambientColor = vec3(0.0,0.1,0.0);
    vec3 diffuseColor = vec3(0.0,0.7,0.0);
    vec3 specularColor = vec3(0.0,1.0,0.0);;
    varCol = vec3(ambientColor +
                lambertian * diffuseColor +
                specular * specularColor);
    //varCol = normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 varCol;
uniform vec4 color;
void main() {
    gl_FragColor = color;
    gl_FragColor = vec4(varCol,1.0);
    if(color.a>100.0){
        gl_FragColor = vec4(1.0);
    }
}`;