
// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
attribute vec2 texCoord;
uniform mat4 ModelViewProjectionMatrix, NormalM;

varying vec3 varCol;
varying vec2 texCoordV;
uniform vec3 texTranslate;
uniform float scaleAmpl;

mat4 translation(vec3 t) {
    return mat4(
        vec4(1.0, 0.0, 0.0, 0.0),
        vec4(0.0, 1.0, 0.0, 0.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        vec4(t, 1.0)
    );
}

mat4 scaling(float s) {
    return mat4(
        vec4(s, 0.0, 0.0, 0.0),
        vec4(0.0, s, 0.0, 0.0),
        vec4(0.0, 0.0, s, 0.0),
        vec4(0.0, 0.0, 0.0, 1.0)
    );
}

void main() {
    vec4 texTransformed = translation(texTranslate) * scaling(scaleAmpl) * translation(-texTranslate) * vec4(texCoord, 0.0, 1.0);
    texCoordV = texTransformed.xy;

    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    varCol = vec3(1.0); // Предположим, что цвет по умолчанию - белый
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif

varying vec3 varCol;
uniform vec4 color;
uniform sampler2D tmu;
varying vec2 texCoordV;

void main() {
    vec4 textureColor = texture2D(tmu, texCoordV);
    gl_FragColor = textureColor * vec4(varCol, 1.0);

    if (color.a > 100.0) {
        gl_FragColor = vec4(1.0);
    }
}`;